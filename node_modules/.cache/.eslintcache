[{"/home/grace/Desktop/waaw-blogg/client/src/index.js":"1","/home/grace/Desktop/waaw-blogg/client/src/App.js":"2","/home/grace/Desktop/waaw-blogg/client/src/redux/store/store.js":"3","/home/grace/Desktop/waaw-blogg/client/src/LoggedInRoute.js":"4","/home/grace/Desktop/waaw-blogg/client/src/NotLoggedInRoute.js":"5","/home/grace/Desktop/waaw-blogg/client/src/components/Layout/Layout.js":"6","/home/grace/Desktop/waaw-blogg/client/src/pages/Home/Home.js":"7","/home/grace/Desktop/waaw-blogg/client/src/pages/Login/Login.js":"8","/home/grace/Desktop/waaw-blogg/client/src/pages/Signup/Signup.js":"9","/home/grace/Desktop/waaw-blogg/client/src/pages/Posts/NewPost.js":"10","/home/grace/Desktop/waaw-blogg/client/src/pages/Posts/UserPosts.js":"11","/home/grace/Desktop/waaw-blogg/client/src/pages/Posts/EditPost.js":"12","/home/grace/Desktop/waaw-blogg/client/src/pages/Posts/Post.js":"13","/home/grace/Desktop/waaw-blogg/client/src/pages/Users/UserProfile.js":"14","/home/grace/Desktop/waaw-blogg/client/src/pages/NotFound/NotFound.js":"15","/home/grace/Desktop/waaw-blogg/client/src/redux/reducers/rootReducer.js":"16","/home/grace/Desktop/waaw-blogg/client/src/redux/sagas/rootSaga.js":"17","/home/grace/Desktop/waaw-blogg/client/src/pages/Login/LoginForm.js":"18","/home/grace/Desktop/waaw-blogg/client/src/pages/Signup/SignupForm.js":"19","/home/grace/Desktop/waaw-blogg/client/src/components/Navbars/HorizontalNavbar.js":"20","/home/grace/Desktop/waaw-blogg/client/src/components/Footer/FooterComponent.js":"21","/home/grace/Desktop/waaw-blogg/client/src/api/api.js":"22","/home/grace/Desktop/waaw-blogg/client/src/components/Jumbotron/Jumbotron.js":"23","/home/grace/Desktop/waaw-blogg/client/src/components/PostsGrid/PostsGrid.js":"24","/home/grace/Desktop/waaw-blogg/client/src/pages/Comments/Comments.js":"25","/home/grace/Desktop/waaw-blogg/client/src/pages/Comments/CommentForm.js":"26","/home/grace/Desktop/waaw-blogg/client/src/redux/sagas/userAuthSaga.js":"27","/home/grace/Desktop/waaw-blogg/client/src/redux/reducers/userAuthReducer.js":"28","/home/grace/Desktop/waaw-blogg/client/src/redux/actions/actionCreator.js":"29","/home/grace/Desktop/waaw-blogg/client/src/pages/Comments/CommentsDesktop.js":"30","/home/grace/Desktop/waaw-blogg/client/src/pages/Comments/CommentsMobile.js":"31","/home/grace/Desktop/waaw-blogg/client/src/redux/store/sessionStorage.js":"32","/home/grace/Desktop/waaw-blogg/client/src/redux/actions/index.js":"33"},{"size":471,"mtime":1646469741037,"results":"34","hashOfConfig":"35"},{"size":1290,"mtime":1646471488775,"results":"36","hashOfConfig":"35"},{"size":842,"mtime":1646469741041,"results":"37","hashOfConfig":"35"},{"size":552,"mtime":1646469741029,"results":"38","hashOfConfig":"35"},{"size":532,"mtime":1646469741029,"results":"39","hashOfConfig":"35"},{"size":595,"mtime":1646469741037,"results":"40","hashOfConfig":"35"},{"size":5029,"mtime":1646469741037,"results":"41","hashOfConfig":"35"},{"size":1134,"mtime":1646469741037,"results":"42","hashOfConfig":"35"},{"size":894,"mtime":1646469741037,"results":"43","hashOfConfig":"35"},{"size":3840,"mtime":1646469741037,"results":"44","hashOfConfig":"35"},{"size":2470,"mtime":1646469741037,"results":"45","hashOfConfig":"35"},{"size":4452,"mtime":1646469741037,"results":"46","hashOfConfig":"35"},{"size":5072,"mtime":1646469741037,"results":"47","hashOfConfig":"35"},{"size":12319,"mtime":1646469741037,"results":"48","hashOfConfig":"35"},{"size":404,"mtime":1646469741037,"results":"49","hashOfConfig":"35"},{"size":191,"mtime":1646469741037,"results":"50","hashOfConfig":"35"},{"size":179,"mtime":1646469741037,"results":"51","hashOfConfig":"35"},{"size":3650,"mtime":1646469741037,"results":"52","hashOfConfig":"35"},{"size":5174,"mtime":1646469741037,"results":"53","hashOfConfig":"35"},{"size":2384,"mtime":1646469741037,"results":"54","hashOfConfig":"35"},{"size":193,"mtime":1646473268280,"results":"55","hashOfConfig":"35"},{"size":1062,"mtime":1646469741029,"results":"56","hashOfConfig":"35"},{"size":161,"mtime":1646469741037,"results":"57","hashOfConfig":"35"},{"size":3227,"mtime":1646469741037,"results":"58","hashOfConfig":"35"},{"size":4221,"mtime":1646469741037,"results":"59","hashOfConfig":"35"},{"size":2705,"mtime":1646469741037,"results":"60","hashOfConfig":"35"},{"size":811,"mtime":1646469741037,"results":"61","hashOfConfig":"35"},{"size":1770,"mtime":1646469741037,"results":"62","hashOfConfig":"35"},{"size":472,"mtime":1646469741037,"results":"63","hashOfConfig":"35"},{"size":3964,"mtime":1646469741037,"results":"64","hashOfConfig":"35"},{"size":3855,"mtime":1646469741037,"results":"65","hashOfConfig":"35"},{"size":662,"mtime":1646469741041,"results":"66","hashOfConfig":"35"},{"size":163,"mtime":1646469741037,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"ic7qdi",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"70"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"70"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"/home/grace/Desktop/waaw-blogg/client/src/index.js",[],["150","151"],"/home/grace/Desktop/waaw-blogg/client/src/App.js",[],"/home/grace/Desktop/waaw-blogg/client/src/redux/store/store.js",[],"/home/grace/Desktop/waaw-blogg/client/src/LoggedInRoute.js",[],"/home/grace/Desktop/waaw-blogg/client/src/NotLoggedInRoute.js",[],"/home/grace/Desktop/waaw-blogg/client/src/components/Layout/Layout.js",["152","153","154"],"import React from \"react\";\nimport HorizontalNavbar from \"./../Navbars/HorizontalNavbar\";\nimport { Layout as AntdLayout } from \"antd\";\nimport FooterComponent from \"./../Footer/FooterComponent\";\n\nconst { Header, Footer, Sider, Content } = AntdLayout;\n\nexport default function Layout({ children }) {\n  return (\n    <AntdLayout>\n      <Header>\n        <HorizontalNavbar />\n      </Header>\n      <div className=\"page-container\">\n        <div className=\"page-content\">{children}</div>\n        <div className=\"footer\">\n          <FooterComponent />\n        </div>\n      </div>\n    </AntdLayout>\n  );\n}\n","/home/grace/Desktop/waaw-blogg/client/src/pages/Home/Home.js",["155","156","157","158"],"import React, { useEffect, useState } from \"react\";\nimport Jumbotron from \"../../components/Jumbotron/Jumbotron\";\nimport \"./Home.scss\";\nimport { Player } from \"@lottiefiles/react-lottie-player\";\nimport { Button, Row, Col, Divider, Card, Spin, Alert } from \"antd\";\nimport { RightCircleOutlined } from \"@ant-design/icons\";\nimport { useHistory } from \"react-router-dom\";\nimport { postsAPI } from \"../../api/api\";\nimport defaultPostImage from \"./../../assets/images/default-post-image.jpg\";\nimport { useSelector } from \"react-redux\";\nimport PostsGrid from \"../../components/PostsGrid/PostsGrid\";\nconst { Meta } = Card;\n\nexport default function Home() {\n  const router = useHistory();\n  const userState = useSelector((st) => st.user);\n  const [postsData, setPostsData] = useState([]);\n  const [width, setWidth] = useState(window.innerWidth);\n  const [errorMsg, setErrorMsg] = useState(null);\n  const [reload, setReload] = useState(false);\n\n  useEffect(() => {\n    function handleResize() {\n      setWidth(window.innerWidth);\n    }\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [width]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const { data: res } = await postsAPI.getAll();\n        setPostsData(res);\n        setErrorMsg(null);\n      } catch (error) {\n        setErrorMsg(\"Error loading posts data\");\n        console.log(\"Error retrieving all posts...\", error);\n      }\n    })();\n  }, [reload]);\n\n  return (\n    <div className=\"home\">\n      {userState.isLoggedIn ? (\n        <>\n          <Jumbotron>\n            <div className=\"home-jumbotron\">\n              {width <= 650 ? (\n                <div className=\"centered-section\">\n                  <h3>A blogging website for</h3>\n                  <h2>EVERYONE</h2>\n                  <Button\n                    type=\"primary\"\n                    shape=\"round\"\n                    icon={<RightCircleOutlined />}\n                    size=\"large\"\n                    onClick={() => router.push(\"/posts/new\")}\n                  >\n                    Write a post now!\n                  </Button>\n                </div>\n              ) : (\n                <>\n                  <div className=\"left-section\">\n                    <h3>A blogging website for</h3>\n                    <h2>EVERYONE</h2>\n                    <Button\n                      type=\"primary\"\n                      shape=\"round\"\n                      icon={<RightCircleOutlined />}\n                      size=\"large\"\n                      onClick={() => router.push(\"/posts/new\")}\n                    >\n                      Get Started\n                    </Button>\n                  </div>\n                  <div className=\"right-section\">\n                    <Player\n                      autoplay\n                      loop\n                      src=\"https://assets10.lottiefiles.com/packages/lf20_GtqlRg.json\"\n                    />\n                  </div>\n                </>\n              )}\n            </div>\n          </Jumbotron>\n        </>\n      ) : (\n        <>\n          <Jumbotron>\n            <div className=\"home-jumbotron\">\n              {width <= 650 ? (\n                <div className=\"centered-section\">\n                  <h3>A blogging website for</h3>\n                  <h2>EVERYONE</h2>\n                  <Button\n                    type=\"primary\"\n                    shape=\"round\"\n                    icon={<RightCircleOutlined />}\n                    size=\"large\"\n                    onClick={() => router.push(\"/login\")}\n                  >\n                    Get Started\n                  </Button>\n                </div>\n              ) : (\n                <>\n                  <div className=\"left-section\">\n                    <h3>A blogging website for</h3>\n                    <h2>EVERYONE</h2>\n                    <Button\n                      type=\"primary\"\n                      shape=\"round\"\n                      icon={<RightCircleOutlined />}\n                      size=\"large\"\n                      onClick={() => router.push(\"/login\")}\n                    >\n                      Get Started\n                    </Button>\n                  </div>\n                  <div className=\"right-section\">\n                    <Player\n                      autoplay\n                      loop\n                      src=\"https://assets10.lottiefiles.com/packages/lf20_GtqlRg.json\"\n                    />\n                  </div>\n                </>\n              )}\n            </div>\n          </Jumbotron>\n        </>\n      )}\n      <Divider orientation=\"center\">Most recent posts</Divider>\n      {errorMsg ? (\n        <div className=\"loader-container\">\n          <Alert message={errorMsg} type=\"error\" />\n        </div>\n      ) : postsData && Boolean(postsData.length) ? (\n        <PostsGrid data={postsData} reloadPosts={(param) => setReload(param)} />\n      ) : (\n        <div className=\"loader-container\">\n          <Spin size=\"large\" />\n        </div>\n      )}\n    </div>\n  );\n}\n","/home/grace/Desktop/waaw-blogg/client/src/pages/Login/Login.js",[],"/home/grace/Desktop/waaw-blogg/client/src/pages/Signup/Signup.js",["159"],"import React, { useEffect, useState } from \"react\";\nimport { Player } from \"@lottiefiles/react-lottie-player\";\nimport SignupForm from \"./SignupForm\";\n\nexport default function Signup() {\n  const [width, setWidth] = useState(window.innerWidth);\n  useEffect(() => {\n    function handleResize() {\n      setWidth(window.innerWidth);\n    }\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [width]);\n\n  return (\n    <div className=\"signup\">\n      {width <= 650 ? (\n        <div className=\"center-panel\">\n          <h2 className=\"centered-text\">Sign up for free</h2>\n          <SignupForm />\n        </div>\n      ) : (\n        <>\n          <div className=\"center-panel-small\">\n            <h2 className=\"centered-text\">Sign up for free</h2>\n            <SignupForm />\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n","/home/grace/Desktop/waaw-blogg/client/src/pages/Posts/NewPost.js",["160"],"import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Form, Input, Button, Tag, message } from \"antd\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport isEmpty from \"lodash.isempty\";\nimport { useSelector } from \"react-redux\";\nimport TextArea from \"antd/lib/input/TextArea\";\nimport { postsAPI } from \"./../../api/api\";\n\nexport default function NewPost() {\n  const router = useHistory();\n  const [initialValues, setInitialValues] = useState({});\n  const [submissionErrors, setSubmissionErrors] = useState({});\n  const userState = useSelector((st) => st.user);\n\n  const onSubmit = async (event) => {\n    try {\n      await postsAPI.add({\n        post: { ...event, createdBy: userState.user.id },\n      });\n      message.success(\"Post created successfully\");\n      router.push(\"/\");\n    } catch (error) {\n      console.log(\"Error creating a new post...\", error.response ?? error);\n      if (error.response && error.response.data) {\n        setSubmissionErrors(error.response.data);\n      } else setSubmissionErrors({ err: \"Post error\" });\n    }\n  };\n\n  const checkValidation = (values) => {\n    const errors = {};\n    if (!values.title?.trim()) {\n      errors.title = \"Please enter the post's title\";\n    }\n    if (!values.content?.trim()) {\n      errors.content = \"Please enter the post's content\";\n    }\n    return errors;\n  };\n\n  return (\n    <div className=\"form-container\">\n      <h3>Create a new post</h3>\n      <FinalForm\n        initialValues={initialValues}\n        validate={checkValidation}\n        onSubmit={onSubmit}\n        render={({ handleSubmit, submitting }) => (\n          <form className=\"form\" onSubmit={handleSubmit}>\n            <Form.Item\n              label=\"Title\"\n              labelCol={{ span: 24 }}\n              wrapperCol={{ span: 24 }}\n            >\n              <Field name=\"title\">\n                {({ input, meta }) => (\n                  <div>\n                    <Input {...input} name=\"title\" />\n                    {meta.touched && meta.error && (\n                      <Tag color=\"error\">{meta.error}</Tag>\n                    )}\n                  </div>\n                )}\n              </Field>\n            </Form.Item>\n\n            <Form.Item label=\"Content\" labelCol={{ span: 24 }}>\n              <Field name=\"content\">\n                {({ input, meta }) => (\n                  <div>\n                    <TextArea rows={4} {...input} name=\"content\" />\n                    {meta.touched && meta.error && (\n                      <Tag color=\"error\">{meta.error}</Tag>\n                    )}\n                  </div>\n                )}\n              </Field>\n            </Form.Item>\n\n            <Form.Item label=\"Image URL\" labelCol={{ span: 24 }}>\n              <Field name=\"imagePath\">\n                {({ input, meta }) => (\n                  <div>\n                    <Input {...input} name=\"imagePath\" />\n                    {meta.touched && meta.error && (\n                      <Tag color=\"error\">{meta.error}</Tag>\n                    )}\n                  </div>\n                )}\n              </Field>\n            </Form.Item>\n\n            {!isEmpty(submissionErrors) && (\n              <div>\n                {Object.entries(submissionErrors).map(([key, value]) => (\n                  <Tag color=\"error\" className=\"full-width\" key={key}>\n                    {value}\n                  </Tag>\n                ))}\n              </div>\n            )}\n\n            <div className=\"buttons-wrapper-horizontal\">\n              <Button disabled={submitting} htmlType=\"submit\" type=\"primary\">\n                Create Post\n              </Button>\n              <Button htmlType=\"button\" onClick={() => router.goBack()}>\n                Back\n              </Button>\n            </div>\n          </form>\n        )}\n      />\n    </div>\n  );\n}\n","/home/grace/Desktop/waaw-blogg/client/src/pages/Posts/UserPosts.js",["161","162","163","164","165","166","167","168"],"import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { postsAPI } from \"./../../api/api\";\nimport { useLocation } from \"react-router-dom\";\nimport PostsGrid from \"../../components/PostsGrid/PostsGrid\";\nimport { Form, Input, Button, Tag, message, Image, Spin, Alert } from \"antd\";\n\nexport default function UserPosts() {\n  const userState = useSelector((st) => st.user);\n  const [width, setWidth] = useState(window.innerWidth);\n  const [postsData, setPostsData] = useState([]);\n  const location = useLocation();\n  const [userName, setUserName] = useState(null);\n  const [userID, setUserID] = useState(null);\n  const [reload, setReload] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(null);\n\n  useEffect(() => {\n    function handleResize() {\n      setWidth(window.innerWidth);\n    }\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [width]);\n\n  const getPostsData = async () => {\n    try {\n      const { data: res } = await postsAPI.getPostByUserId(\n        userID ?? userState.user.id\n      );\n      setPostsData(res);\n      setErrorMsg(null);\n    } catch (error) {\n      setPostsData([]);\n      setErrorMsg(\"Error loading user posts\");\n      console.log(\"Error retrieving all posts...\", error);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (\n        location.state &&\n        location.state.hasOwnProperty(\"userID\") &&\n        location.state.hasOwnProperty(\"userName\")\n      ) {\n        setUserName(location.state.userName);\n        setUserID(location.state.userID);\n      }\n\n      getPostsData();\n    })();\n  }, [location.state]);\n\n  useEffect(() => {\n    getPostsData();\n  }, [reload]);\n\n  return (\n    <div className=\"posts-div\">\n      {errorMsg ? (\n        <div className=\"loader-container\">\n          <Alert message={errorMsg} type=\"error\" />\n        </div>\n      ) : Object.keys(postsData).length === 0 ? (\n        <div className=\"loader-container\">\n          <Spin size=\"large\" />\n        </div>\n      ) : (\n        <>\n          <h2>{userName ? `Posts of user ${userName}` : \"Your posts\"}</h2>\n          {Boolean(postsData) && Boolean(postsData.length) ? (\n            <PostsGrid\n              data={postsData}\n              reloadPosts={(reloadTrigger) => setReload(reloadTrigger)}\n            />\n          ) : (\n            <h2>You have no posts yet</h2>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","/home/grace/Desktop/waaw-blogg/client/src/pages/Posts/EditPost.js",["169","170","171"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { Form, Input, Button, Tag, message } from \"antd\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport isEmpty from \"lodash.isempty\";\nimport { useSelector } from \"react-redux\";\nimport TextArea from \"antd/lib/input/TextArea\";\nimport { postsAPI } from \"./../../api/api\";\n\nexport default function EditPost() {\n  const router = useHistory();\n  const [initialValues, setInitialValues] = useState({});\n  const [submissionErrors, setSubmissionErrors] = useState({});\n  const userState = useSelector((st) => st.user);\n  const location = useLocation();\n  const [postID, setPostID] = useState(null);\n\n  useEffect(() => {\n    let id = null;\n    (async () => {\n      if (location.state && location.state.hasOwnProperty(\"postID\")) {\n        id = location.state.postID;\n        setPostID(id);\n        try {\n          const { data: res } = await postsAPI.getOne(id);\n          console.log(res);\n          setInitialValues(res);\n        } catch (error) {\n          console.log(\"Error retrieving one post...\", error);\n        }\n      } else {\n        message.error(\"Post ID was not provided\");\n        router.goBack();\n      }\n    })();\n  }, [location.state]);\n\n  const onSubmit = async (event) => {\n    try {\n      await postsAPI.update({\n        post: event,\n      });\n      message.success(\"Post updated successfully\");\n      router.goBack();\n    } catch (error) {\n      console.log(\"Error updating post...\", error.response ?? error);\n      if (error.response && error.response.data) {\n        setSubmissionErrors(error.response.data);\n      } else setSubmissionErrors({ err: \"Update error\" });\n    }\n  };\n\n  const checkValidation = (values) => {\n    const errors = {};\n    if (!values.title?.trim()) {\n      errors.title = \"Please enter the post's title\";\n    }\n    if (!values.content?.trim()) {\n      errors.content = \"Please enter the post's content\";\n    }\n    return errors;\n  };\n\n  return (\n    <div className=\"form-container\">\n      <h3>Edit post</h3>\n      <FinalForm\n        initialValues={initialValues}\n        validate={checkValidation}\n        onSubmit={onSubmit}\n        render={({ handleSubmit, submitting }) => (\n          <form className=\"form\" onSubmit={handleSubmit}>\n            <Form.Item\n              label=\"Title\"\n              labelCol={{ span: 24 }}\n              wrapperCol={{ span: 24 }}\n            >\n              <Field name=\"title\">\n                {({ input, meta }) => (\n                  <div>\n                    <Input {...input} name=\"title\" />\n                    {meta.touched && meta.error && (\n                      <Tag color=\"error\">{meta.error}</Tag>\n                    )}\n                  </div>\n                )}\n              </Field>\n            </Form.Item>\n\n            <Form.Item label=\"Content\" labelCol={{ span: 24 }}>\n              <Field name=\"content\">\n                {({ input, meta }) => (\n                  <div>\n                    <TextArea rows={4} {...input} name=\"content\" />\n                    {meta.touched && meta.error && (\n                      <Tag color=\"error\">{meta.error}</Tag>\n                    )}\n                  </div>\n                )}\n              </Field>\n            </Form.Item>\n\n            <Form.Item label=\"Image URL\" labelCol={{ span: 24 }}>\n              <Field name=\"imagePath\">\n                {({ input, meta }) => (\n                  <div>\n                    <Input {...input} name=\"imagePath\" />\n                    {meta.touched && meta.error && (\n                      <Tag color=\"error\">{meta.error}</Tag>\n                    )}\n                  </div>\n                )}\n              </Field>\n            </Form.Item>\n\n            {!isEmpty(submissionErrors) && (\n              <div>\n                {Object.entries(submissionErrors).map(([key, value]) => (\n                  <Tag color=\"error\" className=\"full-width\" key={key}>\n                    {value}\n                  </Tag>\n                ))}\n              </div>\n            )}\n\n            <div className=\"buttons-wrapper-horizontal\">\n              <Button disabled={submitting} htmlType=\"submit\" type=\"primary\">\n                Update Post\n              </Button>\n              <Button htmlType=\"button\" onClick={() => router.goBack()}>\n                Back\n              </Button>\n            </div>\n          </form>\n        )}\n      />\n    </div>\n  );\n}\n","/home/grace/Desktop/waaw-blogg/client/src/pages/Posts/Post.js",["172"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { Button, message, Image, Spin, Alert, Modal, Divider } from \"antd\";\nimport { EditFilled, DeleteFilled } from \"@ant-design/icons\";\nimport { useSelector } from \"react-redux\";\nimport { postsAPI } from \"./../../api/api\";\nimport \"./Post.scss\";\nimport defaultPostImage from \"./../../assets/images/default-post-image.jpg\";\nimport defaultUser from \"./../../assets/images/default-user.png\";\nimport moment from \"moment\";\nimport Avatar from \"antd/lib/avatar/avatar\";\nimport CommentForm from \"../Comments/CommentForm\";\nimport Comments from \"../Comments/Comments\";\n\nexport default function Post() {\n  const [postData, setPostData] = useState({});\n  const router = useHistory();\n  const userState = useSelector((st) => st.user);\n  const location = useLocation();\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [deletePostID, setDeletePostID] = useState(null);\n  const [errorMsg, setErrorMsg] = useState(null);\n  const [reloadDelete, setReloadDelete] = useState(null);\n  const [reloadEdit, setReloadEdit] = useState(null);\n  const [reloadPost, setReloadPost] = useState(null);\n\n  useEffect(() => {\n    let id = null;\n    (async () => {\n      if (location.state && location.state.hasOwnProperty(\"postID\")) {\n        id = location.state.postID;\n        try {\n          const { data: res } = await postsAPI.getOne(id);\n          setPostData(res);\n          setErrorMsg(null);\n        } catch (error) {\n          setPostData({});\n          setErrorMsg(\"Error loading post data\");\n          console.log(\"Error retrieving one post...\", error);\n        }\n      } else {\n        message.error(\"An error occured while retrieving post ID\");\n        router.push(\"/\");\n      }\n    })();\n  }, [location.state, reloadDelete, reloadPost, reloadEdit]);\n\n  const confirmDelete = async () => {\n    try {\n      await postsAPI.delete(deletePostID);\n      setDeleteModal(false);\n      message.success(\"Post deleted successfully\");\n      router.goBack();\n    } catch (error) {\n      console.log(\"Error deleting post...\", error.response ?? error);\n      message.error(\"Error deleting post\");\n      if (error.response && error.response.data) {\n        message.error(error.response.data);\n      } else message.error(\"Error deleting post\");\n      setDeleteModal(false);\n    }\n  };\n\n  return (\n    <div className=\"view-post\">\n      {errorMsg ? (\n        <div className=\"loader-container\">\n          <Alert message={errorMsg} type=\"error\" />\n        </div>\n      ) : Object.keys(postData).length === 0 ? (\n        <div className=\"loader-container\">\n          <Spin size=\"large\" />\n        </div>\n      ) : (\n        <>\n          <div className=\"post-header\">\n            <h1>{postData.title}</h1>\n            <div className=\"two-cols\">\n              <div>\n                <Avatar\n                  size=\"large\"\n                  src={postData.userImageUrl ?? defaultUser}\n                />\n                &nbsp;\n                {postData.createdByName}\n              </div>\n              <p>{moment(postData.createdAt).format(\"DD MMMM YYYY\")}</p>\n            </div>\n          </div>\n          <div className=\"centered-text\">\n            <Image\n              src={postData.imagePath ? postData.imagePath : defaultPostImage}\n            />\n          </div>\n          <div className=\"post-content\">{postData.content}</div>\n          {postData.createdBy === userState.user.id && (\n            <div className=\"buttons-wrapper-horizontal\">\n              <Button\n                htmlType=\"button\"\n                type=\"primary\"\n                icon={<EditFilled />}\n                onClick={() =>\n                  router.push(\"/posts/edit\", { postID: postData._id })\n                }\n              >\n                Edit\n              </Button>\n\n              <Button\n                htmlType=\"button\"\n                type=\"primary\"\n                icon={<DeleteFilled />}\n                danger\n                onClick={() => {\n                  setDeletePostID(postData._id);\n                  setDeleteModal(true);\n                }}\n              >\n                Delete\n              </Button>\n            </div>\n          )}\n          {Boolean(userState.user.id) && (\n            <>\n              <Divider />\n              <CommentForm\n                createdBy={userState.user.id}\n                postId={postData._id}\n                setReloadingFlag={(value) => setReloadPost(value)}\n              />\n            </>\n          )}\n          <Comments\n            data={postData.comments}\n            setDeleteReloadingFlag={(value) => setReloadDelete(value)}\n            setEditReloadingFlag={(value) => setReloadEdit(value)}\n          />\n\n          <Modal\n            title=\"Delete Confirmation\"\n            visible={deleteModal}\n            onOk={() => confirmDelete()}\n            onCancel={() => setDeleteModal(false)}\n            centered\n          >\n            <p>Are you sure you want to delete post?</p>\n          </Modal>\n        </>\n      )}\n    </div>\n  );\n}\n","/home/grace/Desktop/waaw-blogg/client/src/pages/Users/UserProfile.js",["173"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Form, Input, Button, Tag, message, Image, Spin, Alert } from \"antd\";\nimport {\n  EditFilled,\n  LockFilled,\n  SaveFilled,\n  CaretLeftOutlined,\n} from \"@ant-design/icons\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport isEmpty from \"lodash.isempty\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { usersAPI } from \"./../../api/api\";\nimport defaultUser from \"./../../assets/images/default-user.png\";\nimport \"./UserProfile.scss\";\nimport { userAuthActions } from \"./../../redux/actions/actionCreator\";\n\nexport default function UserProfile() {\n  const router = useHistory();\n  const [initialValues, setInitialValues] = useState({});\n  const [submissionErrors, setSubmissionErrors] = useState({});\n  const userState = useSelector((st) => st.user);\n  const [editing, setEditing] = useState(false);\n  const [editingPassword, setEditingPassword] = useState(false);\n  const dispatch = useDispatch();\n  const [errorMsg, setErrorMsg] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      if (userState && userState.user && userState.user.id) {\n        try {\n          const { data: res } = await usersAPI.getOne(userState.user.id);\n          setInitialValues(res);\n          setErrorMsg(null);\n        } catch (error) {\n          setInitialValues({});\n          setErrorMsg(\"Error loading user profile\");\n          console.log(\"Error retrieving user data...\", error);\n        }\n      } else {\n        message.error(\"An error occured while retrieving user ID\");\n        router.push(\"/\");\n      }\n    })();\n  }, []);\n\n  const checkValidation = (values) => {\n    const errors = {};\n    if (editing && !values.userName?.trim()) {\n      errors.userName = \"Please enter the userName\";\n    }\n    if (editingPassword && !values.oldPassword?.trim()) {\n      errors.password = \"Please enter the old password\";\n    }\n    if (editingPassword && !values.password?.trim()) {\n      errors.password = \"Please enter the password\";\n    }\n    if (editingPassword && !values.confirmPassword?.trim()) {\n      errors.confirmPassword = \"Please enter the password confirmation\";\n    } else if (editingPassword && values.confirmPassword !== values.password) {\n      errors.confirmPassword = \"Passwords do not match\";\n    }\n    if (editing && !values.email?.trim()) {\n      errors.email = \"Please enter the email\";\n    }\n    return errors;\n  };\n\n  const onSubmit = async (event) => {\n    setSubmissionErrors([]);\n    try {\n      await usersAPI.update({ user: event });\n      dispatch(userAuthActions.updateUser(event));\n      message.success(\"User profile updated successfully\");\n      setEditing(false);\n      setEditingPassword(false);\n      setInitialValues(event);\n    } catch (error) {\n      console.log(\"Error updating user profile..\", error.response ?? error);\n      if (error.response && error.response.data) {\n        setSubmissionErrors(error.response.data);\n      } else setSubmissionErrors({ err: \"Profile update error\" });\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"user-profile\">\n        {errorMsg ? (\n          <div className=\"loader-container\">\n            <Alert message={errorMsg} type=\"error\" />\n          </div>\n        ) : Object.keys(initialValues).length === 0 ? (\n          <div className=\"loader-container\">\n            <Spin size=\"large\" />\n          </div>\n        ) : (\n          <>\n            <h2 className=\"centered-text \">\n              {initialValues.userName}'s Profile\n            </h2>\n            <div className=\"user-image centered-text \">\n              <Image\n                className=\"image\"\n                src={initialValues.imagePath ?? defaultUser}\n              />\n            </div>\n            <div className=\"user-info\">\n              <FinalForm\n                initialValues={initialValues}\n                validate={checkValidation}\n                onSubmit={onSubmit}\n                render={({ handleSubmit, submitting, form }) => (\n                  <form className=\"form\" onSubmit={handleSubmit}>\n                    <Form.Item\n                      label=\"UserName\"\n                      labelCol={{ span: 24 }}\n                      wrapperCol={{ span: 24 }}\n                    >\n                      <Field name=\"userName\">\n                        {({ input, meta }) => (\n                          <div>\n                            <Input\n                              {...input}\n                              name=\"userName\"\n                              readOnly={!editing}\n                              className={!editing && \"disabled\"}\n                            />\n                            {meta.touched && meta.error && (\n                              <Tag color=\"error\">{meta.error}</Tag>\n                            )}\n                          </div>\n                        )}\n                      </Field>\n                    </Form.Item>\n\n                    <Form.Item label=\"Email\" labelCol={{ span: 24 }}>\n                      <Field name=\"email\">\n                        {({ input, meta }) => (\n                          <div>\n                            <Input\n                              {...input}\n                              name=\"email\"\n                              readOnly={!editing}\n                              className={!editing && \"disabled\"}\n                            />\n                            {meta.touched && meta.error && (\n                              <Tag color=\"error\">{meta.error}</Tag>\n                            )}\n                          </div>\n                        )}\n                      </Field>\n                    </Form.Item>\n                    <Form.Item label=\"Summary\" labelCol={{ span: 24 }}>\n                      <Field name=\"summary\">\n                        {({ input, meta }) => (\n                          <div>\n                            <Input\n                              {...input}\n                              value={\n                                !initialValues.summary && !editing\n                                  ? \"No content\"\n                                  : initialValues.summary\n                              }\n                              name=\"summary\"\n                              readOnly={!editing}\n                              className={!editing && \"disabled\"}\n                            />\n                            {meta.touched && meta.error && (\n                              <Tag color=\"error\">{meta.error}</Tag>\n                            )}\n                          </div>\n                        )}\n                      </Field>\n                    </Form.Item>\n                    {editing && (\n                      <Form.Item label=\"Image URL\" labelCol={{ span: 24 }}>\n                        <Field name=\"imagePath\">\n                          {({ input, meta }) => (\n                            <div>\n                              <Input {...input} name=\"imagePath\" />\n                              {meta.touched && meta.error && (\n                                <Tag color=\"error\">{meta.error}</Tag>\n                              )}\n                            </div>\n                          )}\n                        </Field>\n                      </Form.Item>\n                    )}\n\n                    {editingPassword && (\n                      <>\n                        <Form.Item label=\"Old Password\" labelCol={{ span: 24 }}>\n                          <Field name=\"oldPassword\">\n                            {({ input, meta }) => (\n                              <div>\n                                <Input.Password\n                                  {...input}\n                                  name=\"oldPassword\"\n                                  className=\"no-radius\"\n                                />\n                                {meta.touched && meta.error && (\n                                  <Tag color=\"error\">{meta.error}</Tag>\n                                )}\n                              </div>\n                            )}\n                          </Field>\n                        </Form.Item>\n                        <Form.Item label=\"Password\" labelCol={{ span: 24 }}>\n                          <Field name=\"password\">\n                            {({ input, meta }) => (\n                              <div>\n                                <Input.Password {...input} name=\"password\" />\n                                {meta.touched && meta.error && (\n                                  <Tag color=\"error\">{meta.error}</Tag>\n                                )}\n                              </div>\n                            )}\n                          </Field>\n                        </Form.Item>\n                        <Form.Item\n                          label=\"Confirm Password\"\n                          labelCol={{ span: 24 }}\n                        >\n                          <Field name=\"confirmPassword\">\n                            {({ input, meta }) => (\n                              <div>\n                                <Input.Password\n                                  {...input}\n                                  name=\"confirmPassword\"\n                                />\n                                {meta.touched && meta.error && (\n                                  <Tag color=\"error\">{meta.error}</Tag>\n                                )}\n                              </div>\n                            )}\n                          </Field>\n                        </Form.Item>\n                      </>\n                    )}\n\n                    {!isEmpty(submissionErrors) && (\n                      <div>\n                        {Object.entries(submissionErrors).map(\n                          ([key, value]) => (\n                            <Tag color=\"error\" className=\"full-width\" key={key}>\n                              {value}\n                            </Tag>\n                          )\n                        )}\n                      </div>\n                    )}\n\n                    <div className=\"buttons-wrapper-horizontal m-auto\">\n                      {!(editing || editingPassword) && (\n                        <>\n                          <Button\n                            htmlType=\"button\"\n                            type=\"primary\"\n                            icon={<EditFilled />}\n                            onClick={() => {\n                              setEditing(true);\n                              setEditingPassword(false);\n                            }}\n                          >\n                            Edit Profile\n                          </Button>\n                          <Button\n                            htmlType=\"button\"\n                            type=\"primary\"\n                            icon={<LockFilled />}\n                            onClick={() => {\n                              setEditing(false);\n                              setEditingPassword(true);\n                            }}\n                          >\n                            Edit Password\n                          </Button>\n                        </>\n                      )}\n\n                      {(editing || editingPassword) && (\n                        <>\n                          <Button\n                            disabled={submitting}\n                            htmlType=\"submit\"\n                            type=\"primary\"\n                            icon={<SaveFilled />}\n                          >\n                            Submit\n                          </Button>\n                          <Button\n                            htmlType=\"button\"\n                            type=\"primary\"\n                            icon={<CaretLeftOutlined />}\n                            onClick={() => {\n                              setEditing(false);\n                              setEditingPassword(false);\n                              form.reset();\n                            }}\n                          >\n                            Cancel\n                          </Button>\n                        </>\n                      )}\n                    </div>\n                  </form>\n                )}\n              />\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","/home/grace/Desktop/waaw-blogg/client/src/pages/NotFound/NotFound.js",[],"/home/grace/Desktop/waaw-blogg/client/src/redux/reducers/rootReducer.js",[],"/home/grace/Desktop/waaw-blogg/client/src/redux/sagas/rootSaga.js",[],"/home/grace/Desktop/waaw-blogg/client/src/pages/Login/LoginForm.js",["174","175"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Form, Input, Button, Tag, message } from \"antd\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport isEmpty from \"lodash.isempty\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { userAuthActions } from \"./../../redux/actions/actionCreator\";\n\nexport default function LoginForm() {\n  const router = useHistory();\n  const [initialValues, setInitialValues] = useState({});\n  const [submissionErrors, setSubmissionErrors] = useState({});\n  const dispatch = useDispatch();\n  const userState = useSelector((st) => st.user);\n\n  const onSubmit = async (event) => {\n    try {\n      dispatch(userAuthActions.login({ user: event }));\n    } catch (error) {\n      console.log(\"Error logging in user...\", error.response ?? error);\n      if (error.response && error.response.data) {\n        setSubmissionErrors(error.response.data);\n      } else setSubmissionErrors({ err: \"Login error\" });\n    }\n  };\n\n  const checkValidation = (values) => {\n    const errors = {};\n    if (!values.email?.trim()) {\n      errors.email = \"Please enter the email\";\n    }\n    if (!values.password?.trim()) {\n      errors.password = \"Please enter the password\";\n    }\n    return errors;\n  };\n\n  useEffect(() => {\n    if (userState.error) {\n      setSubmissionErrors([userState.error]);\n    }\n    if (userState.isLoggedIn) {\n      message.success(\"User logged in successfully\");\n      router.push(\"/\");\n    }\n  }, [userState]);\n\n  return (\n    <FinalForm\n      initialValues={initialValues}\n      validate={checkValidation}\n      onSubmit={onSubmit}\n      render={({ handleSubmit, submitting }) => (\n        <form className=\"form\" onSubmit={handleSubmit}>\n          <Form.Item\n            label=\"Email\"\n            labelCol={{ span: 24 }}\n            wrapperCol={{ span: 24 }}\n          >\n            <Field name=\"email\">\n              {({ input, meta }) => (\n                <div>\n                  <Input {...input} name=\"email\" />\n                  {meta.touched && meta.error && (\n                    <Tag color=\"error\">{meta.error}</Tag>\n                  )}\n                </div>\n              )}\n            </Field>\n          </Form.Item>\n          <Form.Item label=\"Password\" labelCol={{ span: 24 }}>\n            <Field name=\"password\">\n              {({ input, meta }) => (\n                <div>\n                  <Input.Password {...input} name=\"password\" />\n                  {meta.touched && meta.error && (\n                    <Tag color=\"error\">{meta.error}</Tag>\n                  )}\n                </div>\n              )}\n            </Field>\n          </Form.Item>\n\n          {!isEmpty(submissionErrors) && (\n            <div>\n              {typeof submissionErrors === \"object\" ? (\n                Object.entries(submissionErrors).map(([key, value]) => (\n                  <Tag color=\"error\" className=\"full-width\" key={key}>\n                    {value}\n                  </Tag>\n                ))\n              ) : (\n                <Tag color=\"error\" className=\"full-width\">\n                  {submissionErrors}\n                </Tag>\n              )}\n            </div>\n          )}\n\n          <div className=\"buttons-wrapper-vertical\">\n            <Button disabled={submitting} htmlType=\"submit\" type=\"primary\">\n              Login\n            </Button>\n            <Button\n              htmlType=\"button\"\n              type=\"link\"\n              onClick={() => router.push(\"signup\")}\n            >\n              Don't have an account? Signup!\n            </Button>\n          </div>\n        </form>\n      )}\n    />\n  );\n}\n","/home/grace/Desktop/waaw-blogg/client/src/pages/Signup/SignupForm.js",["176"],"import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Form, Input, Button, Tag, message } from \"antd\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { authAPI } from \"./../../api/api\";\nimport isEmpty from \"lodash.isempty\";\n\nexport default function SignupForm() {\n  const router = useHistory();\n  const [initialValues, setInitialValues] = useState({});\n  const [submissionErrors, setSubmissionErrors] = useState({});\n\n  const onSubmit = async (event) => {\n    try {\n      await authAPI.signup({ user: event });\n      message.success(\"User created successfully\");\n      router.push(\"/login\");\n    } catch (error) {\n      console.log(\"Error registering a new user...\", error.response ?? error);\n      if (error.response && error.response.data) {\n        setSubmissionErrors(error.response.data);\n      } else setSubmissionErrors({ err: \"Signup error\" });\n    }\n  };\n\n  const checkValidation = (values) => {\n    const errors = {};\n    if (!values.userName?.trim()) {\n      errors.userName = \"Please enter the userName\";\n    }\n    if (!values.password?.trim()) {\n      errors.password = \"Please enter the password\";\n    }\n    if (!values.confirmPassword?.trim()) {\n      errors.confirmPassword = \"Please enter the password confirmation\";\n    } else if (values.confirmPassword !== values.password) {\n      errors.confirmPassword = \"Passwords do not match\";\n    }\n    if (!values.email?.trim()) {\n      errors.email = \"Please enter the email\";\n    }\n    return errors;\n  };\n\n  return (\n    <FinalForm\n      initialValues={initialValues}\n      validate={checkValidation}\n      onSubmit={onSubmit}\n      render={({ handleSubmit, submitting }) => (\n        <form className=\"form\" onSubmit={handleSubmit}>\n          <Form.Item\n            label=\"UserName\"\n            labelCol={{ span: 24 }}\n            wrapperCol={{ span: 24 }}\n          >\n            <Field name=\"userName\">\n              {({ input, meta }) => (\n                <div>\n                  <Input {...input} name=\"userName\" />\n                  {meta.touched && meta.error && (\n                    <Tag color=\"error\">{meta.error}</Tag>\n                  )}\n                </div>\n              )}\n            </Field>\n          </Form.Item>\n          <Form.Item label=\"Password\" labelCol={{ span: 24 }}>\n            <Field name=\"password\">\n              {({ input, meta }) => (\n                <div>\n                  <Input.Password {...input} name=\"password\" />\n                  {meta.touched && meta.error && (\n                    <Tag color=\"error\">{meta.error}</Tag>\n                  )}\n                </div>\n              )}\n            </Field>\n          </Form.Item>\n          <Form.Item label=\"Confirm Password\" labelCol={{ span: 24 }}>\n            <Field name=\"confirmPassword\">\n              {({ input, meta }) => (\n                <div>\n                  <Input.Password {...input} name=\"confirmPassword\" />\n                  {meta.touched && meta.error && (\n                    <Tag color=\"error\">{meta.error}</Tag>\n                  )}\n                </div>\n              )}\n            </Field>\n          </Form.Item>\n          <Form.Item label=\"Email\" labelCol={{ span: 24 }}>\n            <Field name=\"email\">\n              {({ input, meta }) => (\n                <div>\n                  <Input {...input} name=\"email\" />\n                  {meta.touched && meta.error && (\n                    <Tag color=\"error\">{meta.error}</Tag>\n                  )}\n                </div>\n              )}\n            </Field>\n          </Form.Item>\n          <Form.Item label=\"Summary\" labelCol={{ span: 24 }}>\n            <Field name=\"summary\">\n              {({ input, meta }) => (\n                <div>\n                  <Input {...input} name=\"summary\" />\n                  {meta.touched && meta.error && (\n                    <Tag color=\"error\">{meta.error}</Tag>\n                  )}\n                </div>\n              )}\n            </Field>\n          </Form.Item>\n          <Form.Item label=\"Image URL\" labelCol={{ span: 24 }}>\n            <Field name=\"imagePath\">\n              {({ input, meta }) => (\n                <div>\n                  <Input {...input} name=\"imagePath\" />\n                  {meta.touched && meta.error && (\n                    <Tag color=\"error\">{meta.error}</Tag>\n                  )}\n                </div>\n              )}\n            </Field>\n          </Form.Item>\n\n          {!isEmpty(submissionErrors) && (\n            <div>\n              {Object.entries(submissionErrors).map(([key, value]) => (\n                <Tag color=\"error\" className=\"full-width\" key={key}>\n                  {value}\n                </Tag>\n              ))}\n            </div>\n          )}\n\n          <div className=\"buttons-wrapper-vertical\">\n            <Button disabled={submitting} htmlType=\"submit\" type=\"primary\">\n              Signup\n            </Button>\n            <Button\n              htmlType=\"button\"\n              type=\"link\"\n              onClick={() => router.push(\"login\")}\n            >\n              Already have an account? Login!\n            </Button>\n          </div>\n        </form>\n      )}\n    />\n  );\n}\n","/home/grace/Desktop/waaw-blogg/client/src/components/Navbars/HorizontalNavbar.js",[],"/home/grace/Desktop/waaw-blogg/client/src/components/Footer/FooterComponent.js",[],"/home/grace/Desktop/waaw-blogg/client/src/api/api.js",[],"/home/grace/Desktop/waaw-blogg/client/src/components/Jumbotron/Jumbotron.js",[],"/home/grace/Desktop/waaw-blogg/client/src/components/PostsGrid/PostsGrid.js",[],"/home/grace/Desktop/waaw-blogg/client/src/pages/Comments/Comments.js",["177","178","179","180","181","182","183","184","185","186","187","188","189","190"],"import React, { useState, useEffect } from \"react\";\nimport defaultUser from \"./../../assets/images/default-user.png\";\nimport Avatar from \"antd/lib/avatar/avatar\";\nimport \"./Comments.scss\";\nimport moment from \"moment\";\nimport { EditTwoTone, DeleteTwoTone } from \"@ant-design/icons\";\nimport { useSelector } from \"react-redux\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { Form, Input, Button, message, Alert, Modal } from \"antd\";\nimport { commentsAPI } from \"../../api/api\";\nimport isEmpty from \"lodash.isempty\";\nimport CommentsDesktop from \"./CommentsDesktop\";\nimport CommentsMobile from \"./CommentsMobile\";\n\nexport default function Comments({\n  data,\n  setDeleteReloadingFlag,\n  setEditReloadingFlag,\n}) {\n  const userState = useSelector((st) => st.user);\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [selectedDeleteCommentID, setDeleteSelectedCommentID] = useState(null);\n  const [selectedEditCommentID, setEditSelectedCommentID] = useState(null);\n  const [deleteReloading, setDeleteReloading] = useState(false);\n  const [editReloading, setEditReloading] = useState(false);\n  const [initialValues, setInitialValues] = useState({});\n  const [submissionErrors, setSubmissionErrors] = useState(null);\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    function handleResize() {\n      setWidth(window.innerWidth);\n    }\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [width]);\n\n  const confirmDelete = async () => {\n    try {\n      await commentsAPI.delete(selectedDeleteCommentID);\n      setDeleteModal(false);\n      message.success(\"Comment deleted successfully\");\n      setDeleteReloadingFlag(!deleteReloading);\n      setDeleteReloading(!deleteReloading);\n    } catch (error) {\n      console.log(\"Error deleting comment...\", error.response ?? error);\n      message.error(\"Error deleting comment\");\n      if (error.response && error.response.data) {\n        message.error(error.response.data);\n      } else message.error(\"Error deleting comment\");\n      setDeleteModal(false);\n    }\n  };\n\n  const onSubmit = async (event) => {\n    if (isEmpty(event) || !event.content) {\n      setSubmissionErrors(\"Can't submit an empty comment\");\n    } else {\n      setSubmissionErrors(null);\n    }\n\n    try {\n      await commentsAPI.update({\n        comment: { ...event },\n      });\n      message.success(\"Comment updated successfully\");\n      setEditReloadingFlag(!editReloading);\n      setEditReloading(!editReloading);\n      setEditSelectedCommentID(null);\n    } catch (error) {\n      console.log(\"Error editing comment...\", error.response ?? error);\n      message.error(\"Error editing comment\");\n    }\n  };\n\n  return (\n    <div>\n      {data && Boolean(data.length)\n        ? data.length === 1\n          ? `${data.length} Comment`\n          : `${data.length} Comments`\n        : null}\n\n      {data.map((comment, index) =>\n        width >= 580 ? (\n          <CommentsDesktop\n            comment={comment}\n            index={index}\n            userState={userState}\n            setEditSelectedCommentID={setEditSelectedCommentID}\n            selectedEditCommentID={selectedEditCommentID}\n            setDeleteSelectedCommentID={setDeleteSelectedCommentID}\n            selectedDeleteCommentID={selectedDeleteCommentID}\n            setDeleteModal={setDeleteModal}\n            onSubmit={onSubmit}\n          />\n        ) : (\n          <CommentsMobile\n            comment={comment}\n            index={index}\n            userState={userState}\n            setEditSelectedCommentID={setEditSelectedCommentID}\n            selectedEditCommentID={selectedEditCommentID}\n            setDeleteSelectedCommentID={setDeleteSelectedCommentID}\n            selectedDeleteCommentID={selectedDeleteCommentID}\n            setDeleteModal={setDeleteModal}\n            onSubmit={onSubmit}\n          />\n        )\n      )}\n\n      <Modal\n        title=\"Delete Confirmation\"\n        visible={deleteModal}\n        onOk={() => confirmDelete()}\n        onCancel={() => setDeleteModal(false)}\n        centered\n      >\n        <p>Are you sure you want to delete this comment?</p>\n      </Modal>\n    </div>\n  );\n}\n","/home/grace/Desktop/waaw-blogg/client/src/pages/Comments/CommentForm.js",["191","192","193"],"import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Form, Input, Button, Tag, message, Alert } from \"antd\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport isEmpty from \"lodash.isempty\";\nimport { commentsAPI } from \"./../../api/api\";\n\nexport default function CommentForm({ createdBy, postId, setReloadingFlag }) {\n  const router = useHistory();\n  const [initialValues, setInitialValues] = useState({});\n  const [submissionErrors, setSubmissionErrors] = useState(null);\n  const [reloading, setReloading] = useState(false);\n\n  const onSubmit = async (event) => {\n    if (isEmpty(event) || !event.content) {\n      setSubmissionErrors(\"Can't submit an empty comment\");\n    } else {\n      setSubmissionErrors(null);\n    }\n\n    try {\n      await commentsAPI.add({\n        comment: { ...event, createdBy: createdBy, postId: postId },\n      });\n      message.success(\"Comment added successfully\");\n      setReloading(!reloading);\n      setReloadingFlag(reloading);\n    } catch (error) {\n      console.log(\"Error adding comment...\", error.response ?? error);\n      if (error.response && error.response.data) {\n        setSubmissionErrors(error.response.data);\n      } else setSubmissionErrors(\"Error adding comment\");\n    }\n  };\n\n  return (\n    <div className=\"comment-form\">\n      <FinalForm\n        initialValues={initialValues}\n        onSubmit={onSubmit}\n        render={({ form, handleSubmit, submitting, reset }) => (\n          <form\n            onSubmit={async (event) => {\n              await handleSubmit(event);\n              form.reset();\n            }}\n          >\n            <Form.Item labelCol={{ span: 24 }}>\n              <Field name=\"content\">\n                {({ input, meta }) => (\n                  <div>\n                    <Input\n                      {...input}\n                      name=\"content\"\n                      placeholder=\"Add a comment\"\n                    />\n                  </div>\n                )}\n              </Field>\n            </Form.Item>\n\n            {submissionErrors && (\n              <Alert\n                message={submissionErrors}\n                type=\"error\"\n                showIcon\n                closable\n              />\n            )}\n\n            <div className=\"comments-btns-container\">\n              <Button\n                disabled={submitting}\n                htmlType=\"button\"\n                onClick={form.reset}\n              >\n                Clear\n              </Button>\n\n              <Button disabled={submitting} htmlType=\"submit\" type=\"primary\">\n                Comment\n              </Button>\n            </div>\n          </form>\n        )}\n      />\n    </div>\n  );\n}\n","/home/grace/Desktop/waaw-blogg/client/src/redux/sagas/userAuthSaga.js",[],"/home/grace/Desktop/waaw-blogg/client/src/redux/reducers/userAuthReducer.js",["194"],"import { userAuth as actions } from \"./../actions/index\";\nimport jwt from \"jsonwebtoken\";\nimport { saveState, loadState } from \"./../store/sessionStorage\";\n\nlet initialState;\nconst emptyState = {\n  isLoggedIn: false,\n  error: \"\",\n  token: null,\n  user: {\n    id: \"\",\n    userName: \"\",\n    imagePath: \"\",\n  },\n};\nif (loadState() && loadState().token) {\n  const decodedToken = jwt.decode(loadState().token);\n  initialState = {\n    ...loadState(),\n    user: {\n      id: decodedToken.id,\n      userName: decodedToken.userName,\n      imagePath: decodedToken.imagePath,\n    },\n  };\n} else {\n  initialState = { ...emptyState };\n}\n\nexport const userAuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.LOGIN_SUCCESS:\n      let newState;\n      if (loadState() && loadState().token) {\n        const decodedToken = jwt.decode(loadState().token);\n        newState = {\n          ...loadState(),\n          user: {\n            id: decodedToken.id,\n            userName: decodedToken.userName,\n            imagePath: decodedToken.imagePath,\n          },\n        };\n      }\n      return newState;\n\n    case actions.UPDATE_USER:\n      let updatedState = {\n        ...state,\n        user: {\n          ...state.user,\n          imagePath: action.payload.imagePath,\n          userName: action.payload.userName,\n        },\n      };\n      saveState(updatedState);\n      return updatedState;\n\n    case actions.LOGOUT:\n      saveState(emptyState);\n      return emptyState;\n\n    case actions.LOGIN_FAILED:\n      if (action.payload) {\n        let newState = {\n          token: null,\n          isLoggedIn: false,\n          error: action.payload,\n        };\n        saveState(newState);\n        return newState;\n      }\n\n    default:\n      return state;\n  }\n};\n","/home/grace/Desktop/waaw-blogg/client/src/redux/actions/actionCreator.js",[],"/home/grace/Desktop/waaw-blogg/client/src/pages/Comments/CommentsDesktop.js",["195"],"import React, { useState } from \"react\";\nimport defaultUser from \"./../../assets/images/default-user.png\";\nimport Avatar from \"antd/lib/avatar/avatar\";\nimport \"./Comments.scss\";\nimport moment from \"moment\";\nimport { EditTwoTone, DeleteTwoTone } from \"@ant-design/icons\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { Form, Input, Button, Alert } from \"antd\";\n\nexport default function CommentsDesktop({\n  comment,\n  index,\n  userState,\n  setDeleteModal,\n  selectedEditCommentID,\n  setDeleteSelectedCommentID,\n  setEditSelectedCommentID,\n  onSubmit,\n}) {\n  const [initialValues, setInitialValues] = useState({});\n  const [submissionErrors, setSubmissionErrors] = useState(null);\n  return (\n    <div className=\"comment-container full-width-comment\" key={index}>\n      <div>\n        <Avatar size=\"large\" src={comment.createdBy.imagePath ?? defaultUser} />\n      </div>\n      <div\n        className={\n          comment._id === selectedEditCommentID ? \"full-width-comment\" : \"cols\"\n        }\n      >\n        <div className=\"comment-text\">\n          <b>{comment.createdBy.userName}</b>\n          <div>\n            {comment._id === selectedEditCommentID ? (\n              <FinalForm\n                initialValues={initialValues}\n                onSubmit={onSubmit}\n                render={({ form, handleSubmit, submitting, reset }) => (\n                  <form\n                    className=\"comment-editing\"\n                    onSubmit={async (event) => {\n                      await handleSubmit(event);\n                      form.reset();\n                    }}\n                  >\n                    <Form.Item labelCol={{ span: 24 }}>\n                      <Field name=\"content\">\n                        {({ input, meta }) => (\n                          <div>\n                            <Input {...input} name=\"content\" />\n                          </div>\n                        )}\n                      </Field>\n                    </Form.Item>\n\n                    {submissionErrors && (\n                      <Alert\n                        message={submissionErrors}\n                        type=\"error\"\n                        showIcon\n                        closable\n                      />\n                    )}\n\n                    <div className=\"comments-btns-container\">\n                      <Button\n                        disabled={submitting}\n                        htmlType=\"submit\"\n                        type=\"primary\"\n                      >\n                        Update Comment\n                      </Button>\n                      <Button\n                        disabled={submitting}\n                        htmlType=\"button\"\n                        onClick={() => setEditSelectedCommentID(null)}\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  </form>\n                )}\n              />\n            ) : (\n              comment.content\n            )}\n          </div>\n        </div>\n        <div className=\"comment-date\">\n          {comment._id !== selectedEditCommentID && (\n            <>\n              {moment(comment.createdAt).fromNow(false)}\n              {comment.createdBy._id === userState.user.id && (\n                <div className=\"icons-cols\">\n                  <EditTwoTone\n                    key=\"edit\"\n                    onClick={() => {\n                      setEditSelectedCommentID(comment._id);\n                      setInitialValues({ ...comment });\n                    }}\n                  />\n                  <DeleteTwoTone\n                    key=\"delete\"\n                    twoToneColor=\"red\"\n                    onClick={() => {\n                      setDeleteSelectedCommentID(comment._id);\n                      setDeleteModal(true);\n                    }}\n                  />\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/grace/Desktop/waaw-blogg/client/src/pages/Comments/CommentsMobile.js",["196"],"import React, { useState } from \"react\";\nimport defaultUser from \"./../../assets/images/default-user.png\";\nimport Avatar from \"antd/lib/avatar/avatar\";\nimport \"./Comments.scss\";\nimport moment from \"moment\";\nimport { EditTwoTone, DeleteTwoTone } from \"@ant-design/icons\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { Form, Input, Button, Alert } from \"antd\";\n\nexport default function CommentsMobile({\n  comment,\n  index,\n  userState,\n  setDeleteModal,\n  selectedEditCommentID,\n  setDeleteSelectedCommentID,\n  setEditSelectedCommentID,\n  onSubmit,\n}) {\n  const [initialValues, setInitialValues] = useState({});\n  const [submissionErrors, setSubmissionErrors] = useState(null);\n  return (\n    <div className=\"comment-container full-width-comment\" key={index}>\n      <div>\n        <Avatar size=\"large\" src={comment.createdBy.imagePath ?? defaultUser} />\n      </div>\n      <div className=\"full-width-comment\">\n        <div className=\"comment-text-mobile\">\n          <b>{comment.createdBy.userName}</b>\n          <div className=\"comment-date-mobile\">\n            {moment(comment.createdAt).fromNow(false)}\n          </div>\n          <div>\n            {comment._id === selectedEditCommentID ? (\n              <FinalForm\n                initialValues={initialValues}\n                onSubmit={onSubmit}\n                render={({ form, handleSubmit, submitting, reset }) => (\n                  <form\n                    className=\"comment-editing\"\n                    onSubmit={async (event) => {\n                      await handleSubmit(event);\n                      form.reset();\n                    }}\n                  >\n                    <Form.Item labelCol={{ span: 24 }}>\n                      <Field name=\"content\">\n                        {({ input, meta }) => (\n                          <div>\n                            <Input {...input} name=\"content\" />\n                          </div>\n                        )}\n                      </Field>\n                    </Form.Item>\n\n                    {submissionErrors && (\n                      <Alert\n                        message={submissionErrors}\n                        type=\"error\"\n                        showIcon\n                        closable\n                      />\n                    )}\n\n                    <div className=\"comments-btns-container\">\n                      <Button\n                        disabled={submitting}\n                        htmlType=\"submit\"\n                        type=\"primary\"\n                      >\n                        Update Comment\n                      </Button>\n                      <Button\n                        disabled={submitting}\n                        htmlType=\"button\"\n                        onClick={() => setEditSelectedCommentID(null)}\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  </form>\n                )}\n              />\n            ) : (\n              comment.content\n            )}\n          </div>\n        </div>\n\n        {comment._id !== selectedEditCommentID && (\n          <>\n            {comment.createdBy._id === userState.user.id && (\n              <div className=\"icons-cols-mobile\">\n                <EditTwoTone\n                  key=\"edit\"\n                  onClick={() => {\n                    setEditSelectedCommentID(comment._id);\n                    setInitialValues({ ...comment });\n                  }}\n                />\n                <DeleteTwoTone\n                  key=\"delete\"\n                  twoToneColor=\"red\"\n                  onClick={() => {\n                    setDeleteSelectedCommentID(comment._id);\n                    setDeleteModal(true);\n                  }}\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","/home/grace/Desktop/waaw-blogg/client/src/redux/store/sessionStorage.js",[],"/home/grace/Desktop/waaw-blogg/client/src/redux/actions/index.js",[],{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","severity":1,"message":"202","line":6,"column":17,"nodeType":"203","messageId":"204","endLine":6,"endColumn":23},{"ruleId":"201","severity":1,"message":"205","line":6,"column":25,"nodeType":"203","messageId":"204","endLine":6,"endColumn":30},{"ruleId":"201","severity":1,"message":"206","line":6,"column":32,"nodeType":"203","messageId":"204","endLine":6,"endColumn":39},{"ruleId":"201","severity":1,"message":"207","line":5,"column":18,"nodeType":"203","messageId":"204","endLine":5,"endColumn":21},{"ruleId":"201","severity":1,"message":"208","line":5,"column":23,"nodeType":"203","messageId":"204","endLine":5,"endColumn":26},{"ruleId":"201","severity":1,"message":"209","line":9,"column":8,"nodeType":"203","messageId":"204","endLine":9,"endColumn":24},{"ruleId":"201","severity":1,"message":"210","line":12,"column":9,"nodeType":"203","messageId":"204","endLine":12,"endColumn":13},{"ruleId":"201","severity":1,"message":"211","line":2,"column":10,"nodeType":"203","messageId":"204","endLine":2,"endColumn":16},{"ruleId":"201","severity":1,"message":"212","line":12,"column":25,"nodeType":"203","messageId":"204","endLine":12,"endColumn":41},{"ruleId":"201","severity":1,"message":"213","line":6,"column":10,"nodeType":"203","messageId":"204","endLine":6,"endColumn":14},{"ruleId":"201","severity":1,"message":"214","line":6,"column":16,"nodeType":"203","messageId":"204","endLine":6,"endColumn":21},{"ruleId":"201","severity":1,"message":"215","line":6,"column":23,"nodeType":"203","messageId":"204","endLine":6,"endColumn":29},{"ruleId":"201","severity":1,"message":"216","line":6,"column":31,"nodeType":"203","messageId":"204","endLine":6,"endColumn":34},{"ruleId":"201","severity":1,"message":"217","line":6,"column":36,"nodeType":"203","messageId":"204","endLine":6,"endColumn":43},{"ruleId":"201","severity":1,"message":"218","line":6,"column":45,"nodeType":"203","messageId":"204","endLine":6,"endColumn":50},{"ruleId":"219","severity":1,"message":"220","line":53,"column":6,"nodeType":"221","endLine":53,"endColumn":22,"suggestions":"222"},{"ruleId":"219","severity":1,"message":"220","line":57,"column":6,"nodeType":"221","endLine":57,"endColumn":14,"suggestions":"223"},{"ruleId":"201","severity":1,"message":"224","line":14,"column":9,"nodeType":"203","messageId":"204","endLine":14,"endColumn":18},{"ruleId":"201","severity":1,"message":"225","line":16,"column":10,"nodeType":"203","messageId":"204","endLine":16,"endColumn":16},{"ruleId":"219","severity":1,"message":"226","line":36,"column":6,"nodeType":"221","endLine":36,"endColumn":22,"suggestions":"227"},{"ruleId":"219","severity":1,"message":"226","line":46,"column":6,"nodeType":"221","endLine":46,"endColumn":60,"suggestions":"228"},{"ruleId":"219","severity":1,"message":"229","line":45,"column":6,"nodeType":"221","endLine":45,"endColumn":8,"suggestions":"230"},{"ruleId":"201","severity":1,"message":"212","line":11,"column":25,"nodeType":"203","messageId":"204","endLine":11,"endColumn":41},{"ruleId":"219","severity":1,"message":"226","line":46,"column":6,"nodeType":"221","endLine":46,"endColumn":17,"suggestions":"231"},{"ruleId":"201","severity":1,"message":"212","line":10,"column":25,"nodeType":"203","messageId":"204","endLine":10,"endColumn":41},{"ruleId":"201","severity":1,"message":"232","line":2,"column":8,"nodeType":"203","messageId":"204","endLine":2,"endColumn":19},{"ruleId":"201","severity":1,"message":"233","line":3,"column":8,"nodeType":"203","messageId":"204","endLine":3,"endColumn":14},{"ruleId":"201","severity":1,"message":"234","line":5,"column":8,"nodeType":"203","messageId":"204","endLine":5,"endColumn":14},{"ruleId":"201","severity":1,"message":"235","line":6,"column":10,"nodeType":"203","messageId":"204","endLine":6,"endColumn":21},{"ruleId":"201","severity":1,"message":"236","line":6,"column":23,"nodeType":"203","messageId":"204","endLine":6,"endColumn":36},{"ruleId":"201","severity":1,"message":"237","line":8,"column":18,"nodeType":"203","messageId":"204","endLine":8,"endColumn":27},{"ruleId":"201","severity":1,"message":"238","line":8,"column":29,"nodeType":"203","messageId":"204","endLine":8,"endColumn":34},{"ruleId":"201","severity":1,"message":"213","line":9,"column":10,"nodeType":"203","messageId":"204","endLine":9,"endColumn":14},{"ruleId":"201","severity":1,"message":"214","line":9,"column":16,"nodeType":"203","messageId":"204","endLine":9,"endColumn":21},{"ruleId":"201","severity":1,"message":"215","line":9,"column":23,"nodeType":"203","messageId":"204","endLine":9,"endColumn":29},{"ruleId":"201","severity":1,"message":"239","line":9,"column":40,"nodeType":"203","messageId":"204","endLine":9,"endColumn":45},{"ruleId":"201","severity":1,"message":"240","line":26,"column":10,"nodeType":"203","messageId":"204","endLine":26,"endColumn":23},{"ruleId":"201","severity":1,"message":"212","line":26,"column":25,"nodeType":"203","messageId":"204","endLine":26,"endColumn":41},{"ruleId":"201","severity":1,"message":"241","line":27,"column":10,"nodeType":"203","messageId":"204","endLine":27,"endColumn":26},{"ruleId":"201","severity":1,"message":"216","line":3,"column":31,"nodeType":"203","messageId":"204","endLine":3,"endColumn":34},{"ruleId":"201","severity":1,"message":"242","line":9,"column":9,"nodeType":"203","messageId":"204","endLine":9,"endColumn":15},{"ruleId":"201","severity":1,"message":"212","line":10,"column":25,"nodeType":"203","messageId":"204","endLine":10,"endColumn":41},{"ruleId":"243","severity":1,"message":"244","line":74,"column":5,"nodeType":"245","messageId":"246","endLine":75,"endColumn":20},{"ruleId":"201","severity":1,"message":"247","line":21,"column":28,"nodeType":"203","messageId":"204","endLine":21,"endColumn":47},{"ruleId":"201","severity":1,"message":"247","line":21,"column":28,"nodeType":"203","messageId":"204","endLine":21,"endColumn":47},"no-native-reassign",["248"],"no-negated-in-lhs",["249"],"no-unused-vars","'Footer' is assigned a value but never used.","Identifier","unusedVar","'Sider' is assigned a value but never used.","'Content' is assigned a value but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'defaultPostImage' is defined but never used.","'Meta' is assigned a value but never used.","'Player' is defined but never used.","'setInitialValues' is assigned a value but never used.","'Form' is defined but never used.","'Input' is defined but never used.","'Button' is defined but never used.","'Tag' is defined but never used.","'message' is defined but never used.","'Image' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getPostsData'. Either include it or remove the dependency array.","ArrayExpression",["250"],["251"],"'userState' is assigned a value but never used.","'postID' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'router'. Either include it or remove the dependency array.",["252"],["253"],"React Hook useEffect has missing dependencies: 'router' and 'userState'. Either include them or remove the dependency array.",["254"],["255"],"'defaultUser' is defined but never used.","'Avatar' is defined but never used.","'moment' is defined but never used.","'EditTwoTone' is defined but never used.","'DeleteTwoTone' is defined but never used.","'FinalForm' is defined but never used.","'Field' is defined but never used.","'Alert' is defined but never used.","'initialValues' is assigned a value but never used.","'submissionErrors' is assigned a value but never used.","'router' is assigned a value but never used.","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","'setSubmissionErrors' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"264","fix":"266"},"Update the dependencies array to be: [getPostsData, location.state]",{"range":"267","text":"268"},"Update the dependencies array to be: [getPostsData, reload]",{"range":"269","text":"270"},"Update the dependencies array to be: [location.state, router]",{"range":"271","text":"272"},"Update the dependencies array to be: [location.state, reloadDelete, reloadPost, reloadEdit, router]",{"range":"273","text":"274"},"Update the dependencies array to be: [router, userState]",{"range":"275","text":"276"},{"range":"277","text":"276"},[1667,1683],"[getPostsData, location.state]",[1732,1740],"[getPostsData, reload]",[1260,1276],"[location.state, router]",[1803,1857],"[location.state, reloadDelete, reloadPost, reloadEdit, router]",[1652,1654],"[router, userState]",[1518,1529]]