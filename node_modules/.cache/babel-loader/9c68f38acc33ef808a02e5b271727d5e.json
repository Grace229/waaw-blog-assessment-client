{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer from \"../reducers/rootReducer\";\nimport rootSaga from \"../sagas/rootSaga\"; // const persistedState = loadState();\n\nconst onSagaUncaughtErrors = (err, errInfo) => {\n  console.log({\n    onSagaError: \"saga error\",\n    err,\n    errInfo\n  });\n};\n\nconst sagaMiddleware = createSagaMiddleware({\n  onError: onSagaUncaughtErrors\n});\nconst loggerMiddleware = createLogger();\nconst middleWares = [loggerMiddleware, sagaMiddleware];\nlet reduxStore;\n\nconst storeConfig = () => {\n  const store = createStore(rootReducer, applyMiddleware(...middleWares)); // start redux sagas\n\n  sagaMiddleware.run(rootSaga);\n  reduxStore = store;\n  return store;\n};\n\nexport { reduxStore };\nexport default storeConfig;","map":{"version":3,"sources":["/home/charis/Desktop/mern-blog/client/src/redux/store/store.js"],"names":["createStore","applyMiddleware","createLogger","createSagaMiddleware","rootReducer","rootSaga","onSagaUncaughtErrors","err","errInfo","console","log","onSagaError","sagaMiddleware","onError","loggerMiddleware","middleWares","reduxStore","storeConfig","store","run"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,QAAP,MAAqB,mBAArB,C,CAEA;;AAEA,MAAMC,oBAAoB,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAC7CC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEC,IAAAA,WAAW,EAAE,YAAf;AAA6BJ,IAAAA,GAA7B;AAAkCC,IAAAA;AAAlC,GAAZ;AACD,CAFD;;AAIA,MAAMI,cAAc,GAAGT,oBAAoB,CAAC;AAAEU,EAAAA,OAAO,EAAEP;AAAX,CAAD,CAA3C;AACA,MAAMQ,gBAAgB,GAAGZ,YAAY,EAArC;AAEA,MAAMa,WAAW,GAAG,CAACD,gBAAD,EAAmBF,cAAnB,CAApB;AAEA,IAAII,UAAJ;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAMC,KAAK,GAAGlB,WAAW,CAACI,WAAD,EAAcH,eAAe,CAAC,GAAGc,WAAJ,CAA7B,CAAzB,CADwB,CAGxB;;AACAH,EAAAA,cAAc,CAACO,GAAf,CAAmBd,QAAnB;AACAW,EAAAA,UAAU,GAAGE,KAAb;AAEA,SAAOA,KAAP;AACD,CARD;;AAUA,SAASF,UAAT;AACA,eAAeC,WAAf","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer from \"../reducers/rootReducer\";\nimport rootSaga from \"../sagas/rootSaga\";\n\n// const persistedState = loadState();\n\nconst onSagaUncaughtErrors = (err, errInfo) => {\n  console.log({ onSagaError: \"saga error\", err, errInfo });\n};\n\nconst sagaMiddleware = createSagaMiddleware({ onError: onSagaUncaughtErrors });\nconst loggerMiddleware = createLogger();\n\nconst middleWares = [loggerMiddleware, sagaMiddleware];\n\nlet reduxStore;\n\nconst storeConfig = () => {\n  const store = createStore(rootReducer, applyMiddleware(...middleWares));\n\n  // start redux sagas\n  sagaMiddleware.run(rootSaga);\n  reduxStore = store;\n\n  return store;\n};\n\nexport { reduxStore };\nexport default storeConfig;\n"]},"metadata":{},"sourceType":"module"}