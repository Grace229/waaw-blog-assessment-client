{"ast":null,"code":"var _jsxFileName = \"/home/charis/Desktop/mern-blog/client/src/pages/Comments/Comments.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport defaultUser from \"./../../assets/images/default-user.png\";\nimport Avatar from \"antd/lib/avatar/avatar\";\nimport \"./Comments.scss\";\nimport moment from \"moment\";\nimport { EditTwoTone, DeleteTwoTone } from \"@ant-design/icons\";\nimport { useSelector } from \"react-redux\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { Form, Input, Button, message, Alert, Modal } from \"antd\";\nimport { commentsAPI } from \"../../api/api\";\nimport isEmpty from \"lodash.isempty\";\nimport CommentsDesktop from \"./CommentsDesktop\";\nimport CommentsMobile from \"./CommentsMobile\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Comments({\n  data,\n  setDeleteReloadingFlag,\n  setEditReloadingFlag\n}) {\n  _s();\n\n  const userState = useSelector(st => st.user);\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [selectedDeleteCommentID, setDeleteSelectedCommentID] = useState(null);\n  const [selectedEditCommentID, setEditSelectedCommentID] = useState(null);\n  const [deleteReloading, setDeleteReloading] = useState(false);\n  const [editReloading, setEditReloading] = useState(false);\n  const [initialValues, setInitialValues] = useState({});\n  const [submissionErrors, setSubmissionErrors] = useState(null);\n  const [width, setWidth] = useState(window.innerWidth);\n  useEffect(() => {\n    function handleResize() {\n      setWidth(window.innerWidth);\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [width]);\n\n  const confirmDelete = async () => {\n    try {\n      await commentsAPI.delete(selectedDeleteCommentID);\n      setDeleteModal(false);\n      message.success(\"Comment deleted successfully\");\n      setDeleteReloadingFlag(!deleteReloading);\n      setDeleteReloading(!deleteReloading);\n    } catch (error) {\n      var _error$response;\n\n      console.log(\"Error deleting comment...\", (_error$response = error.response) !== null && _error$response !== void 0 ? _error$response : error);\n      message.error(\"Error deleting comment\");\n\n      if (error.response && error.response.data) {\n        message.error(error.response.data);\n      } else message.error(\"Error deleting comment\");\n\n      setDeleteModal(false);\n    }\n  };\n\n  const onSubmit = async event => {\n    if (isEmpty(event) || !event.content) {\n      setSubmissionErrors(\"Can't submit an empty comment\");\n    } else {\n      setSubmissionErrors(null);\n    }\n\n    try {\n      await commentsAPI.update({\n        comment: { ...event\n        }\n      });\n      message.success(\"Comment updated successfully\");\n      setEditReloadingFlag(!editReloading);\n      setEditReloading(!editReloading);\n      setEditSelectedCommentID(null);\n    } catch (error) {\n      var _error$response2;\n\n      console.log(\"Error editing comment...\", (_error$response2 = error.response) !== null && _error$response2 !== void 0 ? _error$response2 : error);\n      message.error(\"Error editing comment\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [data && Boolean(data.length) ? data.length === 1 ? `${data.length} Comment` : `${data.length} Comments` : null, data.map((comment, index) => width >= 580 ? /*#__PURE__*/_jsxDEV(CommentsDesktop, {\n      comment: comment,\n      index: index,\n      userState: userState,\n      setEditSelectedCommentID: setEditSelectedCommentID,\n      selectedEditCommentID: selectedEditCommentID,\n      setDeleteSelectedCommentID: setDeleteSelectedCommentID,\n      selectedDeleteCommentID: selectedDeleteCommentID,\n      setDeleteModal: setDeleteModal,\n      onSubmit: onSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(CommentsMobile, {\n      comment: comment,\n      index: index,\n      userState: userState,\n      setEditSelectedCommentID: setEditSelectedCommentID,\n      selectedEditCommentID: selectedEditCommentID,\n      setDeleteSelectedCommentID: setDeleteSelectedCommentID,\n      selectedDeleteCommentID: selectedDeleteCommentID,\n      setDeleteModal: setDeleteModal,\n      onSubmit: onSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Delete Confirmation\",\n      visible: deleteModal,\n      onOk: () => confirmDelete(),\n      onCancel: () => setDeleteModal(false),\n      centered: true,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Are you sure you want to delete this comment?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Comments, \"GIDHLDeMDAHByyI/6MwTaLQlIcA=\", false, function () {\n  return [useSelector];\n});\n\n_c = Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["/home/charis/Desktop/mern-blog/client/src/pages/Comments/Comments.js"],"names":["React","useState","useEffect","defaultUser","Avatar","moment","EditTwoTone","DeleteTwoTone","useSelector","Form","FinalForm","Field","Input","Button","message","Alert","Modal","commentsAPI","isEmpty","CommentsDesktop","CommentsMobile","Comments","data","setDeleteReloadingFlag","setEditReloadingFlag","userState","st","user","deleteModal","setDeleteModal","selectedDeleteCommentID","setDeleteSelectedCommentID","selectedEditCommentID","setEditSelectedCommentID","deleteReloading","setDeleteReloading","editReloading","setEditReloading","initialValues","setInitialValues","submissionErrors","setSubmissionErrors","width","setWidth","window","innerWidth","handleResize","addEventListener","removeEventListener","confirmDelete","delete","success","error","console","log","response","onSubmit","event","content","update","comment","Boolean","length","map","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport defaultUser from \"./../../assets/images/default-user.png\";\nimport Avatar from \"antd/lib/avatar/avatar\";\nimport \"./Comments.scss\";\nimport moment from \"moment\";\nimport { EditTwoTone, DeleteTwoTone } from \"@ant-design/icons\";\nimport { useSelector } from \"react-redux\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { Form, Input, Button, message, Alert, Modal } from \"antd\";\nimport { commentsAPI } from \"../../api/api\";\nimport isEmpty from \"lodash.isempty\";\nimport CommentsDesktop from \"./CommentsDesktop\";\nimport CommentsMobile from \"./CommentsMobile\";\n\nexport default function Comments({\n  data,\n  setDeleteReloadingFlag,\n  setEditReloadingFlag,\n}) {\n  const userState = useSelector((st) => st.user);\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [selectedDeleteCommentID, setDeleteSelectedCommentID] = useState(null);\n  const [selectedEditCommentID, setEditSelectedCommentID] = useState(null);\n  const [deleteReloading, setDeleteReloading] = useState(false);\n  const [editReloading, setEditReloading] = useState(false);\n  const [initialValues, setInitialValues] = useState({});\n  const [submissionErrors, setSubmissionErrors] = useState(null);\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    function handleResize() {\n      setWidth(window.innerWidth);\n    }\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [width]);\n\n  const confirmDelete = async () => {\n    try {\n      await commentsAPI.delete(selectedDeleteCommentID);\n      setDeleteModal(false);\n      message.success(\"Comment deleted successfully\");\n      setDeleteReloadingFlag(!deleteReloading);\n      setDeleteReloading(!deleteReloading);\n    } catch (error) {\n      console.log(\"Error deleting comment...\", error.response ?? error);\n      message.error(\"Error deleting comment\");\n      if (error.response && error.response.data) {\n        message.error(error.response.data);\n      } else message.error(\"Error deleting comment\");\n      setDeleteModal(false);\n    }\n  };\n\n  const onSubmit = async (event) => {\n    if (isEmpty(event) || !event.content) {\n      setSubmissionErrors(\"Can't submit an empty comment\");\n    } else {\n      setSubmissionErrors(null);\n    }\n\n    try {\n      await commentsAPI.update({\n        comment: { ...event },\n      });\n      message.success(\"Comment updated successfully\");\n      setEditReloadingFlag(!editReloading);\n      setEditReloading(!editReloading);\n      setEditSelectedCommentID(null);\n    } catch (error) {\n      console.log(\"Error editing comment...\", error.response ?? error);\n      message.error(\"Error editing comment\");\n    }\n  };\n\n  return (\n    <div>\n      {data && Boolean(data.length)\n        ? data.length === 1\n          ? `${data.length} Comment`\n          : `${data.length} Comments`\n        : null}\n\n      {data.map((comment, index) =>\n        width >= 580 ? (\n          <CommentsDesktop\n            comment={comment}\n            index={index}\n            userState={userState}\n            setEditSelectedCommentID={setEditSelectedCommentID}\n            selectedEditCommentID={selectedEditCommentID}\n            setDeleteSelectedCommentID={setDeleteSelectedCommentID}\n            selectedDeleteCommentID={selectedDeleteCommentID}\n            setDeleteModal={setDeleteModal}\n            onSubmit={onSubmit}\n          />\n        ) : (\n          <CommentsMobile\n            comment={comment}\n            index={index}\n            userState={userState}\n            setEditSelectedCommentID={setEditSelectedCommentID}\n            selectedEditCommentID={selectedEditCommentID}\n            setDeleteSelectedCommentID={setDeleteSelectedCommentID}\n            selectedDeleteCommentID={selectedDeleteCommentID}\n            setDeleteModal={setDeleteModal}\n            onSubmit={onSubmit}\n          />\n        )\n      )}\n\n      <Modal\n        title=\"Delete Confirmation\"\n        visible={deleteModal}\n        onOk={() => confirmDelete()}\n        onCancel={() => setDeleteModal(false)}\n        centered\n      >\n        <p>Are you sure you want to delete this comment?</p>\n      </Modal>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}