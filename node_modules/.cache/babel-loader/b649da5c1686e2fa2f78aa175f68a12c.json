{"ast":null,"code":"var _jsxFileName = \"/home/charis/Desktop/mern-blog/client/src/pages/Posts/UserPosts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { postsAPI } from \"./../../api/api\";\nimport { useLocation } from \"react-router-dom\";\nimport PostsGrid from \"../../components/PostsGrid/PostsGrid\";\nimport { Form, Input, Button, Tag, message, Image, Spin, Alert } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function UserPosts() {\n  _s();\n\n  const userState = useSelector(st => st.user);\n  const [width, setWidth] = useState(window.innerWidth);\n  const [postsData, setPostsData] = useState([]);\n  const location = useLocation();\n  const [userName, setUserName] = useState(null);\n  const [userID, setUserID] = useState(null);\n  const [reload, setReload] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(null);\n  useEffect(() => {\n    function handleResize() {\n      setWidth(window.innerWidth);\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [width]);\n\n  const getPostsData = async () => {\n    try {\n      const {\n        data: res\n      } = await postsAPI.getPostByUserId(userID !== null && userID !== void 0 ? userID : userState.user.id);\n      setPostsData(res);\n      setErrorMsg(null);\n    } catch (error) {\n      setPostsData([]);\n      setErrorMsg(\"Error loading user posts\");\n      console.log(\"Error retrieving all posts...\", error);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (location.state && location.state.hasOwnProperty(\"userID\") && location.state.hasOwnProperty(\"userName\")) {\n        setUserName(location.state.userName);\n        setUserID(location.state.userID);\n      }\n\n      getPostsData();\n    })();\n  }, [location.state]);\n  useEffect(() => {\n    getPostsData();\n  }, [reload]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"posts-div\",\n    children: errorMsg ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader-container\",\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        message: errorMsg,\n        type: \"error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this) : Object.keys(postsData).length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader-container\",\n      children: /*#__PURE__*/_jsxDEV(Spin, {\n        size: \"large\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: userName ? `Posts of user ${userName}` : \"Your posts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), Boolean(postsData) && Boolean(postsData.length) ? /*#__PURE__*/_jsxDEV(PostsGrid, {\n        data: postsData,\n        reloadPosts: reloadTrigger => setReload(reloadTrigger)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"You have no posts yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UserPosts, \"IFB+4ujzU72prXBSKiU3pihucLc=\", false, function () {\n  return [useSelector, useLocation];\n});\n\n_c = UserPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserPosts\");","map":{"version":3,"sources":["/home/charis/Desktop/mern-blog/client/src/pages/Posts/UserPosts.js"],"names":["React","useEffect","useState","useSelector","postsAPI","useLocation","PostsGrid","Form","Input","Button","Tag","message","Image","Spin","Alert","UserPosts","userState","st","user","width","setWidth","window","innerWidth","postsData","setPostsData","location","userName","setUserName","userID","setUserID","reload","setReload","errorMsg","setErrorMsg","handleResize","addEventListener","removeEventListener","getPostsData","data","res","getPostByUserId","id","error","console","log","state","hasOwnProperty","Object","keys","length","Boolean","reloadTrigger"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { postsAPI } from \"./../../api/api\";\nimport { useLocation } from \"react-router-dom\";\nimport PostsGrid from \"../../components/PostsGrid/PostsGrid\";\nimport { Form, Input, Button, Tag, message, Image, Spin, Alert } from \"antd\";\n\nexport default function UserPosts() {\n  const userState = useSelector((st) => st.user);\n  const [width, setWidth] = useState(window.innerWidth);\n  const [postsData, setPostsData] = useState([]);\n  const location = useLocation();\n  const [userName, setUserName] = useState(null);\n  const [userID, setUserID] = useState(null);\n  const [reload, setReload] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(null);\n\n  useEffect(() => {\n    function handleResize() {\n      setWidth(window.innerWidth);\n    }\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [width]);\n\n  const getPostsData = async () => {\n    try {\n      const { data: res } = await postsAPI.getPostByUserId(\n        userID ?? userState.user.id\n      );\n      setPostsData(res);\n      setErrorMsg(null);\n    } catch (error) {\n      setPostsData([]);\n      setErrorMsg(\"Error loading user posts\");\n      console.log(\"Error retrieving all posts...\", error);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (\n        location.state &&\n        location.state.hasOwnProperty(\"userID\") &&\n        location.state.hasOwnProperty(\"userName\")\n      ) {\n        setUserName(location.state.userName);\n        setUserID(location.state.userID);\n      }\n\n      getPostsData();\n    })();\n  }, [location.state]);\n\n  useEffect(() => {\n    getPostsData();\n  }, [reload]);\n\n  return (\n    <div className=\"posts-div\">\n      {errorMsg ? (\n        <div className=\"loader-container\">\n          <Alert message={errorMsg} type=\"error\" />\n        </div>\n      ) : Object.keys(postsData).length === 0 ? (\n        <div className=\"loader-container\">\n          <Spin size=\"large\" />\n        </div>\n      ) : (\n        <>\n          <h2>{userName ? `Posts of user ${userName}` : \"Your posts\"}</h2>\n          {Boolean(postsData) && Boolean(postsData.length) ? (\n            <PostsGrid\n              data={postsData}\n              reloadPosts={(reloadTrigger) => setReload(reloadTrigger)}\n            />\n          ) : (\n            <h2>You have no posts yet</h2>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}