{"ast":null,"code":"import { userAuth as actions } from \"./../actions/index\";\nimport jwt from \"jsonwebtoken\";\nimport { saveState, loadState } from \"./../store/sessionStorage\";\nlet initialState;\nconst emptyState = {\n  isLoggedIn: false,\n  error: \"\",\n  token: null,\n  user: {\n    id: \"\",\n    userName: \"\",\n    imagePath: \"\"\n  }\n};\n\nif (loadState() && loadState().token) {\n  const decodedToken = jwt.decode(loadState().token);\n  initialState = { ...loadState(),\n    user: {\n      id: decodedToken.id,\n      userName: decodedToken.userName,\n      imagePath: decodedToken.imagePath\n    }\n  };\n} else {\n  initialState = { ...emptyState\n  };\n}\n\nexport const userAuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.LOGIN_SUCCESS:\n      let newState;\n\n      if (loadState() && loadState().token) {\n        const decodedToken = jwt.decode(loadState().token);\n        newState = { ...loadState(),\n          user: {\n            id: decodedToken.id,\n            userName: decodedToken.userName,\n            imagePath: decodedToken.imagePath\n          }\n        };\n      }\n\n      return newState;\n\n    case actions.UPDATE_USER:\n      let updatedState = { ...state,\n        user: { ...state.user,\n          imagePath: action.payload.imagePath,\n          userName: action.payload.userName\n        }\n      };\n      saveState(updatedState);\n      return updatedState;\n\n    case actions.LOGOUT:\n      saveState(emptyState);\n      return emptyState;\n\n    case actions.LOGIN_FAILED:\n      if (action.payload) {\n        let newState = {\n          token: null,\n          isLoggedIn: false,\n          error: action.payload\n        };\n        saveState(newState);\n        return newState;\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/charis/Desktop/waaw-blog/client/src/redux/reducers/userAuthReducer.js"],"names":["userAuth","actions","jwt","saveState","loadState","initialState","emptyState","isLoggedIn","error","token","user","id","userName","imagePath","decodedToken","decode","userAuthReducer","state","action","type","LOGIN_SUCCESS","newState","UPDATE_USER","updatedState","payload","LOGOUT","LOGIN_FAILED"],"mappings":"AAAA,SAASA,QAAQ,IAAIC,OAArB,QAAoC,oBAApC;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,2BAArC;AAEA,IAAIC,YAAJ;AACA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,UAAU,EAAE,KADK;AAEjBC,EAAAA,KAAK,EAAE,EAFU;AAGjBC,EAAAA,KAAK,EAAE,IAHU;AAIjBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,EAAE,EAAE,EADA;AAEJC,IAAAA,QAAQ,EAAE,EAFN;AAGJC,IAAAA,SAAS,EAAE;AAHP;AAJW,CAAnB;;AAUA,IAAIT,SAAS,MAAMA,SAAS,GAAGK,KAA/B,EAAsC;AACpC,QAAMK,YAAY,GAAGZ,GAAG,CAACa,MAAJ,CAAWX,SAAS,GAAGK,KAAvB,CAArB;AACAJ,EAAAA,YAAY,GAAG,EACb,GAAGD,SAAS,EADC;AAEbM,IAAAA,IAAI,EAAE;AACJC,MAAAA,EAAE,EAAEG,YAAY,CAACH,EADb;AAEJC,MAAAA,QAAQ,EAAEE,YAAY,CAACF,QAFnB;AAGJC,MAAAA,SAAS,EAAEC,YAAY,CAACD;AAHpB;AAFO,GAAf;AAQD,CAVD,MAUO;AACLR,EAAAA,YAAY,GAAG,EAAE,GAAGC;AAAL,GAAf;AACD;;AAED,OAAO,MAAMU,eAAe,GAAG,CAACC,KAAK,GAAGZ,YAAT,EAAuBa,MAAvB,KAAkC;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKlB,OAAO,CAACmB,aAAb;AACE,UAAIC,QAAJ;;AACA,UAAIjB,SAAS,MAAMA,SAAS,GAAGK,KAA/B,EAAsC;AACpC,cAAMK,YAAY,GAAGZ,GAAG,CAACa,MAAJ,CAAWX,SAAS,GAAGK,KAAvB,CAArB;AACAY,QAAAA,QAAQ,GAAG,EACT,GAAGjB,SAAS,EADH;AAETM,UAAAA,IAAI,EAAE;AACJC,YAAAA,EAAE,EAAEG,YAAY,CAACH,EADb;AAEJC,YAAAA,QAAQ,EAAEE,YAAY,CAACF,QAFnB;AAGJC,YAAAA,SAAS,EAAEC,YAAY,CAACD;AAHpB;AAFG,SAAX;AAQD;;AACD,aAAOQ,QAAP;;AAEF,SAAKpB,OAAO,CAACqB,WAAb;AACE,UAAIC,YAAY,GAAG,EACjB,GAAGN,KADc;AAEjBP,QAAAA,IAAI,EAAE,EACJ,GAAGO,KAAK,CAACP,IADL;AAEJG,UAAAA,SAAS,EAAEK,MAAM,CAACM,OAAP,CAAeX,SAFtB;AAGJD,UAAAA,QAAQ,EAAEM,MAAM,CAACM,OAAP,CAAeZ;AAHrB;AAFW,OAAnB;AAQAT,MAAAA,SAAS,CAACoB,YAAD,CAAT;AACA,aAAOA,YAAP;;AAEF,SAAKtB,OAAO,CAACwB,MAAb;AACEtB,MAAAA,SAAS,CAACG,UAAD,CAAT;AACA,aAAOA,UAAP;;AAEF,SAAKL,OAAO,CAACyB,YAAb;AACE,UAAIR,MAAM,CAACM,OAAX,EAAoB;AAClB,YAAIH,QAAQ,GAAG;AACbZ,UAAAA,KAAK,EAAE,IADM;AAEbF,UAAAA,UAAU,EAAE,KAFC;AAGbC,UAAAA,KAAK,EAAEU,MAAM,CAACM;AAHD,SAAf;AAKArB,QAAAA,SAAS,CAACkB,QAAD,CAAT;AACA,eAAOA,QAAP;AACD;;AAEH;AACE,aAAOJ,KAAP;AA5CJ;AA8CD,CA/CM","sourcesContent":["import { userAuth as actions } from \"./../actions/index\";\nimport jwt from \"jsonwebtoken\";\nimport { saveState, loadState } from \"./../store/sessionStorage\";\n\nlet initialState;\nconst emptyState = {\n  isLoggedIn: false,\n  error: \"\",\n  token: null,\n  user: {\n    id: \"\",\n    userName: \"\",\n    imagePath: \"\",\n  },\n};\nif (loadState() && loadState().token) {\n  const decodedToken = jwt.decode(loadState().token);\n  initialState = {\n    ...loadState(),\n    user: {\n      id: decodedToken.id,\n      userName: decodedToken.userName,\n      imagePath: decodedToken.imagePath,\n    },\n  };\n} else {\n  initialState = { ...emptyState };\n}\n\nexport const userAuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.LOGIN_SUCCESS:\n      let newState;\n      if (loadState() && loadState().token) {\n        const decodedToken = jwt.decode(loadState().token);\n        newState = {\n          ...loadState(),\n          user: {\n            id: decodedToken.id,\n            userName: decodedToken.userName,\n            imagePath: decodedToken.imagePath,\n          },\n        };\n      }\n      return newState;\n\n    case actions.UPDATE_USER:\n      let updatedState = {\n        ...state,\n        user: {\n          ...state.user,\n          imagePath: action.payload.imagePath,\n          userName: action.payload.userName,\n        },\n      };\n      saveState(updatedState);\n      return updatedState;\n\n    case actions.LOGOUT:\n      saveState(emptyState);\n      return emptyState;\n\n    case actions.LOGIN_FAILED:\n      if (action.payload) {\n        let newState = {\n          token: null,\n          isLoggedIn: false,\n          error: action.payload,\n        };\n        saveState(newState);\n        return newState;\n      }\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}