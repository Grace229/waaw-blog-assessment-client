{"ast":null,"code":"var _jsxFileName = \"/home/charis/Desktop/mern-blog/client/src/pages/Comments/CommentForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Form, Input, Button, Tag, message, Alert } from \"antd\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport isEmpty from \"lodash.isempty\";\nimport { commentsAPI } from \"./../../api/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CommentForm({\n  createdBy,\n  postId,\n  setReloadingFlag\n}) {\n  _s();\n\n  const router = useHistory();\n  const [initialValues, setInitialValues] = useState({});\n  const [submissionErrors, setSubmissionErrors] = useState(null);\n  const [reloading, setReloading] = useState(false);\n\n  const onSubmit = async event => {\n    if (isEmpty(event) || !event.content) {\n      setSubmissionErrors(\"Can't submit an empty comment\");\n    } else {\n      setSubmissionErrors(null);\n    }\n\n    try {\n      await commentsAPI.add({\n        comment: { ...event,\n          createdBy: createdBy,\n          postId: postId\n        }\n      });\n      message.success(\"Comment added successfully\");\n      setReloading(!reloading);\n      setReloadingFlag(reloading);\n    } catch (error) {\n      var _error$response;\n\n      console.log(\"Error adding comment...\", (_error$response = error.response) !== null && _error$response !== void 0 ? _error$response : error);\n\n      if (error.response && error.response.data) {\n        setSubmissionErrors(error.response.data);\n      } else setSubmissionErrors(\"Error adding comment\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment-form\",\n    children: /*#__PURE__*/_jsxDEV(FinalForm, {\n      initialValues: initialValues,\n      onSubmit: onSubmit,\n      render: ({\n        form,\n        handleSubmit,\n        submitting,\n        reset\n      }) => /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: async event => {\n          await handleSubmit(event);\n          form.reset();\n        },\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          labelCol: {\n            span: 24\n          },\n          children: /*#__PURE__*/_jsxDEV(Field, {\n            name: \"content\",\n            children: ({\n              input,\n              meta\n            }) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Input, { ...input,\n                name: \"content\",\n                placeholder: \"Add a comment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this), submissionErrors && /*#__PURE__*/_jsxDEV(Alert, {\n          message: submissionErrors,\n          type: \"error\",\n          showIcon: true,\n          closable: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comments-btns-container\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            disabled: submitting,\n            htmlType: \"button\",\n            onClick: form.reset,\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            disabled: submitting,\n            htmlType: \"submit\",\n            type: \"primary\",\n            children: \"Comment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CommentForm, \"3VbONOExziJYojaljfvTcAT0F7I=\", false, function () {\n  return [useHistory];\n});\n\n_c = CommentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"sources":["/home/charis/Desktop/mern-blog/client/src/pages/Comments/CommentForm.js"],"names":["React","useState","useHistory","Form","Input","Button","Tag","message","Alert","FinalForm","Field","isEmpty","commentsAPI","CommentForm","createdBy","postId","setReloadingFlag","router","initialValues","setInitialValues","submissionErrors","setSubmissionErrors","reloading","setReloading","onSubmit","event","content","add","comment","success","error","console","log","response","data","form","handleSubmit","submitting","reset","span","input","meta"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Form, Input, Button, Tag, message, Alert } from \"antd\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport isEmpty from \"lodash.isempty\";\nimport { commentsAPI } from \"./../../api/api\";\n\nexport default function CommentForm({ createdBy, postId, setReloadingFlag }) {\n  const router = useHistory();\n  const [initialValues, setInitialValues] = useState({});\n  const [submissionErrors, setSubmissionErrors] = useState(null);\n  const [reloading, setReloading] = useState(false);\n\n  const onSubmit = async (event) => {\n    if (isEmpty(event) || !event.content) {\n      setSubmissionErrors(\"Can't submit an empty comment\");\n    } else {\n      setSubmissionErrors(null);\n    }\n\n    try {\n      await commentsAPI.add({\n        comment: { ...event, createdBy: createdBy, postId: postId },\n      });\n      message.success(\"Comment added successfully\");\n      setReloading(!reloading);\n      setReloadingFlag(reloading);\n    } catch (error) {\n      console.log(\"Error adding comment...\", error.response ?? error);\n      if (error.response && error.response.data) {\n        setSubmissionErrors(error.response.data);\n      } else setSubmissionErrors(\"Error adding comment\");\n    }\n  };\n\n  return (\n    <div className=\"comment-form\">\n      <FinalForm\n        initialValues={initialValues}\n        onSubmit={onSubmit}\n        render={({ form, handleSubmit, submitting, reset }) => (\n          <form\n            onSubmit={async (event) => {\n              await handleSubmit(event);\n              form.reset();\n            }}\n          >\n            <Form.Item labelCol={{ span: 24 }}>\n              <Field name=\"content\">\n                {({ input, meta }) => (\n                  <div>\n                    <Input\n                      {...input}\n                      name=\"content\"\n                      placeholder=\"Add a comment\"\n                    />\n                  </div>\n                )}\n              </Field>\n            </Form.Item>\n\n            {submissionErrors && (\n              <Alert\n                message={submissionErrors}\n                type=\"error\"\n                showIcon\n                closable\n              />\n            )}\n\n            <div className=\"comments-btns-container\">\n              <Button\n                disabled={submitting}\n                htmlType=\"button\"\n                onClick={form.reset}\n              >\n                Clear\n              </Button>\n\n              <Button disabled={submitting} htmlType=\"submit\" type=\"primary\">\n                Comment\n              </Button>\n            </div>\n          </form>\n        )}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}